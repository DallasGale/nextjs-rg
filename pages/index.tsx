import type { NextPage } from "next";
import Head from "next/head";
import _ from "lodash";

// Components
import Header from "../components/header";
import PostTile from "../components/post-tile";

// GraphQl
import { request } from "../lib/datocms";
import { HOMEPAGE_QUERY } from "../lib/query";

// Types
import type { HomeType, PostType } from "./types";
import Layout from "../components/layout";
import Container from "../components/container";

export async function getStaticProps() {
  const homeData = await request({
    query: HOMEPAGE_QUERY,
    variables: null,
    preview: false,
  });
  return {
    props: { homeData },
  };
}

const Home: React.FC<HomeType> = ({ homeData }) => {
  const featurePost = homeData.allPosts[2];
  const stripPost = homeData.allPosts[3];

  // console.log(_.uniq(categories));
  const categories = homeData.allPosts.map(
    (post: PostType) => post.category.name
  );
  return (
    // <div>
    //   <Head>
    //     <title>Create Next App</title>
    //     <meta name="description" content="Generated by create next app" />
    //     <link rel="icon" href="/favicon.ico" />
    //   </Head>

    <Layout navItems={_.uniq(categories)}>
      <Container>
        {/* <Header navItems={_.uniq(categories)} /> */}

        <div className="page-content home">
          {/* <TextStrip
          image={{ src: "/eustace-400.png", alt: "Support Buzzz" }}
          justifyContent="center"
          text="Support <i>Buzz the boy's</i> award winning journalism. <a href='/'>Subscribe today Â»"
        /> */}

          <div className="grid above-fold">
            <div className="grid-col--thumbnail-posts">
              {homeData.allPosts
                .slice(0, 2)
                .map(
                  ({
                    id,
                    title,
                    category,
                    excerpt,
                    coverImage,
                    author,
                    slug,
                  }: PostType) => {
                    return (
                      <PostTile
                        id={id}
                        tileType="default"
                        slug={slug}
                        key={id}
                        title={title}
                        category={category.name}
                        excerpt={excerpt}
                        coverImage={coverImage}
                        blurUpThumb={coverImage.blurUpThumb}
                        author={author.name}
                      />
                    );
                  }
                )}
            </div>

            <div className="grid-col--featured-posts">
              <PostTile
                id={featurePost.id}
                slug={featurePost.slug}
                tileType="feature"
                title={featurePost.title}
                category={featurePost.category.name}
                excerpt={featurePost.excerpt}
                coverImage={featurePost.coverImage}
                blurUpThumb={featurePost.coverImage.blurUpThumb}
                author={featurePost.author.name}
              />
              <PostTile
                id={stripPost.id}
                slug={stripPost.slug}
                tileType="strip"
                title={stripPost.title}
                category={stripPost.category.name}
                excerpt={stripPost.excerpt}
                coverImage={stripPost.coverImage}
                blurUpThumb={stripPost.coverImage.blurUpThumb}
                author={stripPost.author.name}
              />
            </div>

            <div className="grid-col--news-culture">
              {homeData.allPosts
                .slice(3)
                .map(
                  ({
                    id,
                    title,
                    category,
                    excerpt,
                    coverImage,
                    author,
                    slug,
                  }: PostType) => {
                    return (
                      <PostTile
                        id={id}
                        slug={slug}
                        tileType="mini"
                        key={id}
                        title={title}
                        category={category.name}
                        excerpt={excerpt}
                        coverImage={coverImage}
                        // focalPoint={coverImage.focalPoint}
                        blurUpThumb={coverImage.blurUpThumb}
                        author={author.name}
                      />
                    );
                  }
                )}
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  );
};

export default Home;
